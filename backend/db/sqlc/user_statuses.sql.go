// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user_statuses.sql

package db

import (
	"context"
)

const createUserStatus = `-- name: CreateUserStatus :one
INSERT INTO user_statuses (
  status_name
) VALUES (
  $1
) RETURNING id, status_name, created_at, updated_at
`

func (q *Queries) CreateUserStatus(ctx context.Context, statusName string) (UserStatus, error) {
	row := q.db.QueryRow(ctx, createUserStatus, statusName)
	var i UserStatus
	err := row.Scan(
		&i.ID,
		&i.StatusName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserStatus = `-- name: DeleteUserStatus :exec
DELETE FROM user_statuses
WHERE id = $1
`

func (q *Queries) DeleteUserStatus(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserStatus, id)
	return err
}

const getUserStatus = `-- name: GetUserStatus :one
SELECT id, status_name, created_at, updated_at FROM user_statuses 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserStatus(ctx context.Context, id int32) (UserStatus, error) {
	row := q.db.QueryRow(ctx, getUserStatus, id)
	var i UserStatus
	err := row.Scan(
		&i.ID,
		&i.StatusName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserStatusForUpdate = `-- name: GetUserStatusForUpdate :one
SELECT id, status_name, created_at, updated_at FROM user_statuses
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserStatusForUpdate(ctx context.Context, id int32) (UserStatus, error) {
	row := q.db.QueryRow(ctx, getUserStatusForUpdate, id)
	var i UserStatus
	err := row.Scan(
		&i.ID,
		&i.StatusName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserStatuses = `-- name: GetUserStatuses :many
SELECT id, status_name, created_at, updated_at FROM user_statuses
LIMIT $2
OFFSET $1
`

type GetUserStatusesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetUserStatuses(ctx context.Context, arg GetUserStatusesParams) ([]UserStatus, error) {
	rows, err := q.db.Query(ctx, getUserStatuses, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserStatus{}
	for rows.Next() {
		var i UserStatus
		if err := rows.Scan(
			&i.ID,
			&i.StatusName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserUserStatusByName = `-- name: GetUserUserStatusByName :one
SELECT id, status_name FROM user_statuses
WHERE status_name = $1 LIMIT 1
`

type GetUserUserStatusByNameRow struct {
	ID         int32  `json:"id"`
	StatusName string `json:"status_name"`
}

func (q *Queries) GetUserUserStatusByName(ctx context.Context, statusName string) (GetUserUserStatusByNameRow, error) {
	row := q.db.QueryRow(ctx, getUserUserStatusByName, statusName)
	var i GetUserUserStatusByNameRow
	err := row.Scan(&i.ID, &i.StatusName)
	return i, err
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
UPDATE user_statuses
SET
  status_name = $2,
  updated_at = NOW()
WHERE id = $1
`

type UpdateUserStatusParams struct {
	ID         int32  `json:"id"`
	StatusName string `json:"status_name"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserStatus, arg.ID, arg.StatusName)
	return err
}
