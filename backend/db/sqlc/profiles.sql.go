// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: profiles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (
  user_id, latest_contract_id, gender_id, date_of_birth, nationality, 
  marital_status_id, dependents, emergency_contact_id, department_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, user_id, latest_contract_id, gender_id, date_of_birth, nationality, marital_status_id, dependents, emergency_contact_id, department_id, created_at, updated_at
`

type CreateProfileParams struct {
	UserID             pgtype.Int4      `json:"user_id"`
	LatestContractID   pgtype.Int4      `json:"latest_contract_id"`
	GenderID           pgtype.Int4      `json:"gender_id"`
	DateOfBirth        pgtype.Timestamp `json:"date_of_birth"`
	Nationality        string           `json:"nationality"`
	MaritalStatusID    int32            `json:"marital_status_id"`
	Dependents         pgtype.Int4      `json:"dependents"`
	EmergencyContactID pgtype.Int4      `json:"emergency_contact_id"`
	DepartmentID       pgtype.Int4      `json:"department_id"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.UserID,
		arg.LatestContractID,
		arg.GenderID,
		arg.DateOfBirth,
		arg.Nationality,
		arg.MaritalStatusID,
		arg.Dependents,
		arg.EmergencyContactID,
		arg.DepartmentID,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LatestContractID,
		&i.GenderID,
		&i.DateOfBirth,
		&i.Nationality,
		&i.MaritalStatusID,
		&i.Dependents,
		&i.EmergencyContactID,
		&i.DepartmentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles
WHERE id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProfile, id)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT id, user_id, latest_contract_id, gender_id, date_of_birth, nationality, marital_status_id, dependents, emergency_contact_id, department_id, created_at, updated_at FROM profiles 
WHERE id = $1
`

func (q *Queries) GetProfile(ctx context.Context, id int32) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LatestContractID,
		&i.GenderID,
		&i.DateOfBirth,
		&i.Nationality,
		&i.MaritalStatusID,
		&i.Dependents,
		&i.EmergencyContactID,
		&i.DepartmentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileForUpdate = `-- name: GetProfileForUpdate :one
SELECT id, user_id, latest_contract_id, gender_id, date_of_birth, nationality, marital_status_id, dependents, emergency_contact_id, department_id, created_at, updated_at FROM profiles
WHERE id = $1
FOR UPDATE
`

func (q *Queries) GetProfileForUpdate(ctx context.Context, id int32) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileForUpdate, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LatestContractID,
		&i.GenderID,
		&i.DateOfBirth,
		&i.Nationality,
		&i.MaritalStatusID,
		&i.Dependents,
		&i.EmergencyContactID,
		&i.DepartmentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfiles = `-- name: GetProfiles :many
SELECT id, user_id, latest_contract_id, gender_id, date_of_birth, nationality, marital_status_id, dependents, emergency_contact_id, department_id, created_at, updated_at FROM profiles
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetProfilesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetProfiles(ctx context.Context, arg GetProfilesParams) ([]Profile, error) {
	rows, err := q.db.Query(ctx, getProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Profile{}
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LatestContractID,
			&i.GenderID,
			&i.DateOfBirth,
			&i.Nationality,
			&i.MaritalStatusID,
			&i.Dependents,
			&i.EmergencyContactID,
			&i.DepartmentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :exec
UPDATE profiles
SET
  user_id = COALESCE($2, user_id),
  latest_contract_id = COALESCE($3, latest_contract_id),
  gender_id = COALESCE($4, gender_id),
  date_of_birth = COALESCE($5, date_of_birth),
  nationality = COALESCE($6, nationality),
  marital_status_id = COALESCE($7, marital_status_id),
  dependents = COALESCE($8, dependents),
  emergency_contact_id = COALESCE($9, emergency_contact_id),
  department_id = COALESCE($10, department_id),
  updated_at = NOW()
WHERE id = $1
`

type UpdateProfileParams struct {
	ID                 int32            `json:"id"`
	UserID             pgtype.Int4      `json:"user_id"`
	LatestContractID   pgtype.Int4      `json:"latest_contract_id"`
	GenderID           pgtype.Int4      `json:"gender_id"`
	DateOfBirth        pgtype.Timestamp `json:"date_of_birth"`
	Nationality        string           `json:"nationality"`
	MaritalStatusID    int32            `json:"marital_status_id"`
	Dependents         pgtype.Int4      `json:"dependents"`
	EmergencyContactID pgtype.Int4      `json:"emergency_contact_id"`
	DepartmentID       pgtype.Int4      `json:"department_id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.Exec(ctx, updateProfile,
		arg.ID,
		arg.UserID,
		arg.LatestContractID,
		arg.GenderID,
		arg.DateOfBirth,
		arg.Nationality,
		arg.MaritalStatusID,
		arg.Dependents,
		arg.EmergencyContactID,
		arg.DepartmentID,
	)
	return err
}
