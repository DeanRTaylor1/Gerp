// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: marital_statuses.sql

package db

import (
	"context"
)

const createMaritalStatus = `-- name: CreateMaritalStatus :one
INSERT INTO marital_statuses (
  status_name
) VALUES (
  $1
) RETURNING id, status_name, created_at, updated_at
`

func (q *Queries) CreateMaritalStatus(ctx context.Context, statusName string) (MaritalStatus, error) {
	row := q.db.QueryRow(ctx, createMaritalStatus, statusName)
	var i MaritalStatus
	err := row.Scan(
		&i.ID,
		&i.StatusName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMaritalStatus = `-- name: DeleteMaritalStatus :exec
DELETE FROM marital_statuses
WHERE id = $1
`

func (q *Queries) DeleteMaritalStatus(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMaritalStatus, id)
	return err
}

const getMaritalStatus = `-- name: GetMaritalStatus :one
SELECT id, status_name, created_at, updated_at FROM marital_statuses 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMaritalStatus(ctx context.Context, id int32) (MaritalStatus, error) {
	row := q.db.QueryRow(ctx, getMaritalStatus, id)
	var i MaritalStatus
	err := row.Scan(
		&i.ID,
		&i.StatusName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMaritalStatusByName = `-- name: GetMaritalStatusByName :one
SELECT id, status_name FROM marital_statuses
WHERE status_name = $1 LIMIT 1
`

type GetMaritalStatusByNameRow struct {
	ID         int32  `json:"id"`
	StatusName string `json:"status_name"`
}

func (q *Queries) GetMaritalStatusByName(ctx context.Context, statusName string) (GetMaritalStatusByNameRow, error) {
	row := q.db.QueryRow(ctx, getMaritalStatusByName, statusName)
	var i GetMaritalStatusByNameRow
	err := row.Scan(&i.ID, &i.StatusName)
	return i, err
}

const getMaritalStatusForUpdate = `-- name: GetMaritalStatusForUpdate :one
SELECT id, status_name, created_at, updated_at FROM marital_statuses
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetMaritalStatusForUpdate(ctx context.Context, id int32) (MaritalStatus, error) {
	row := q.db.QueryRow(ctx, getMaritalStatusForUpdate, id)
	var i MaritalStatus
	err := row.Scan(
		&i.ID,
		&i.StatusName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMaritalStatuses = `-- name: GetMaritalStatuses :many
SELECT id, status_name, created_at, updated_at FROM marital_statuses
LIMIT $2
OFFSET $1
`

type GetMaritalStatusesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetMaritalStatuses(ctx context.Context, arg GetMaritalStatusesParams) ([]MaritalStatus, error) {
	rows, err := q.db.Query(ctx, getMaritalStatuses, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MaritalStatus{}
	for rows.Next() {
		var i MaritalStatus
		if err := rows.Scan(
			&i.ID,
			&i.StatusName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaritalStatus = `-- name: UpdateMaritalStatus :exec
UPDATE marital_statuses
SET
  status_name = $2,
  updated_at = NOW()
WHERE id = $1
`

type UpdateMaritalStatusParams struct {
	ID         int32  `json:"id"`
	StatusName string `json:"status_name"`
}

func (q *Queries) UpdateMaritalStatus(ctx context.Context, arg UpdateMaritalStatusParams) error {
	_, err := q.db.Exec(ctx, updateMaritalStatus, arg.ID, arg.StatusName)
	return err
}
