// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: addresses.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (
  profile_id, address_line1, address_line2, city, state, postal_code, 
  country, address_type
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, profile_id, address_line1, address_line2, city, state, postal_code, country, address_type, created_at, updated_at
`

type CreateAddressParams struct {
	ProfileID    pgtype.Int4 `json:"profile_id"`
	AddressLine1 string      `json:"address_line1"`
	AddressLine2 pgtype.Text `json:"address_line2"`
	City         string      `json:"city"`
	State        pgtype.Text `json:"state"`
	PostalCode   pgtype.Text `json:"postal_code"`
	Country      string      `json:"country"`
	AddressType  pgtype.Text `json:"address_type"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.ProfileID,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.Country,
		arg.AddressType,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.AddressType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM addresses
WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAddress, id)
	return err
}

const getAddress = `-- name: GetAddress :one
SELECT id, profile_id, address_line1, address_line2, city, state, postal_code, country, address_type, created_at, updated_at FROM addresses 
WHERE id = $1
`

func (q *Queries) GetAddress(ctx context.Context, id int32) (Address, error) {
	row := q.db.QueryRow(ctx, getAddress, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.AddressType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddressForUpdate = `-- name: GetAddressForUpdate :one
SELECT id, profile_id, address_line1, address_line2, city, state, postal_code, country, address_type, created_at, updated_at FROM addresses
WHERE id = $1
FOR UPDATE
`

func (q *Queries) GetAddressForUpdate(ctx context.Context, id int32) (Address, error) {
	row := q.db.QueryRow(ctx, getAddressForUpdate, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.AddressType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddressesByProfileId = `-- name: GetAddressesByProfileId :many
SELECT id, profile_id, address_line1, address_line2, city, state, postal_code, country, address_type, created_at, updated_at FROM addresses
WHERE profile_id = $1
ORDER BY id
`

func (q *Queries) GetAddressesByProfileId(ctx context.Context, profileID pgtype.Int4) ([]Address, error) {
	rows, err := q.db.Query(ctx, getAddressesByProfileId, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Address{}
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.PostalCode,
			&i.Country,
			&i.AddressType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAddresses = `-- name: GetAllAddresses :many
SELECT id, profile_id, address_line1, address_line2, city, state, postal_code, country, address_type, created_at, updated_at FROM addresses
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetAllAddressesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAddresses(ctx context.Context, arg GetAllAddressesParams) ([]Address, error) {
	rows, err := q.db.Query(ctx, getAllAddresses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Address{}
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.PostalCode,
			&i.Country,
			&i.AddressType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE addresses
SET
  address_line1 = COALESCE($2, address_line1),
  address_line2 = COALESCE($3, address_line2),
  city = COALESCE($4, city),
  state = COALESCE($5, state),
  postal_code = COALESCE($6, postal_code),
  country = COALESCE($7, country),
  address_type = COALESCE($8, address_type),
  updated_at = NOW()
WHERE profile_id = $1
`

type UpdateAddressParams struct {
	ProfileID    pgtype.Int4 `json:"profile_id"`
	AddressLine1 string      `json:"address_line1"`
	AddressLine2 pgtype.Text `json:"address_line2"`
	City         string      `json:"city"`
	State        pgtype.Text `json:"state"`
	PostalCode   pgtype.Text `json:"postal_code"`
	Country      string      `json:"country"`
	AddressType  pgtype.Text `json:"address_type"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.db.Exec(ctx, updateAddress,
		arg.ProfileID,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.Country,
		arg.AddressType,
	)
	return err
}
