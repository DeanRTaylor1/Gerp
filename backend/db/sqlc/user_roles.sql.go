// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user_roles.sql

package db

import (
	"context"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_roles (
  role_name
) VALUES (
  $1
) RETURNING id, role_name, created_at, updated_at
`

func (q *Queries) CreateUserRole(ctx context.Context, roleName string) (UserRole, error) {
	row := q.db.QueryRow(ctx, createUserRole, roleName)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE FROM user_roles
WHERE id = $1
`

func (q *Queries) DeleteUserRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserRole, id)
	return err
}

const getUserRole = `-- name: GetUserRole :one
SELECT id, role_name, created_at, updated_at FROM user_roles 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserRole(ctx context.Context, id int32) (UserRole, error) {
	row := q.db.QueryRow(ctx, getUserRole, id)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserRoleByName = `-- name: GetUserRoleByName :one
SELECT id, role_name FROM user_roles
WHERE role_name = $1 LIMIT 1
`

type GetUserRoleByNameRow struct {
	ID       int32  `json:"id"`
	RoleName string `json:"role_name"`
}

func (q *Queries) GetUserRoleByName(ctx context.Context, roleName string) (GetUserRoleByNameRow, error) {
	row := q.db.QueryRow(ctx, getUserRoleByName, roleName)
	var i GetUserRoleByNameRow
	err := row.Scan(&i.ID, &i.RoleName)
	return i, err
}

const getUserRoleForUpdate = `-- name: GetUserRoleForUpdate :one
SELECT id, role_name, created_at, updated_at FROM user_roles
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserRoleForUpdate(ctx context.Context, id int32) (UserRole, error) {
	row := q.db.QueryRow(ctx, getUserRoleForUpdate, id)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT id, role_name, created_at, updated_at FROM user_roles
LIMIT $2
OFFSET $1
`

type GetUserRolesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetUserRoles(ctx context.Context, arg GetUserRolesParams) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoles, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRole{}
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.ID,
			&i.RoleName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE user_roles
SET
  role_name = $2,
  updated_at = NOW()
WHERE id = $1
`

type UpdateUserRoleParams struct {
	ID       int32  `json:"id"`
	RoleName string `json:"role_name"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.Exec(ctx, updateUserRole, arg.ID, arg.RoleName)
	return err
}
