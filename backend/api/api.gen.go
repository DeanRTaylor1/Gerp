// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {
	AccessToken string `json:"access_token"`
}

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Data    *ApiResponse_Data `json:"data"`
	Message *string           `json:"message,omitempty"`
	Status  *int32            `json:"status,omitempty"`
}

// ApiResponseData0 defines model for .
type ApiResponseData0 = map[string]interface{}

// ApiResponseData1 defines model for .
type ApiResponseData1 = []map[string]interface{}

// ApiResponse_Data defines model for ApiResponse.Data.
type ApiResponse_Data struct {
	union json.RawMessage
}

// AuthorizationErrorResponse defines model for AuthorizationErrorResponse.
type AuthorizationErrorResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// BadRequestErrorResponse defines model for BadRequestErrorResponse.
type BadRequestErrorResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GenderResponse defines model for GenderResponse.
type GenderResponse struct {
	GenderName *string `json:"genderName,omitempty"`
	Id         *int64  `json:"id,omitempty"`
}

// LoginUserRequest defines model for LoginUserRequest.
type LoginUserRequest struct {
	Email    string `json:"email" validate:"email"`
	Password string `json:"password" validate:"min=8,matches=^[a-zA-Z0-9]*$"`
}

// LoginUserResponse defines model for LoginUserResponse.
type LoginUserResponse struct {
	Data    *AccessTokenResponse `json:"data,omitempty"`
	Message *string              `json:"message,omitempty"`
	Status  *int                 `json:"status,omitempty"`
}

// MultiGendersResponse defines model for MultiGendersResponse.
type MultiGendersResponse struct {
	Data    *[]GenderResponse `json:"data,omitempty"`
	Message *string           `json:"message,omitempty"`
	Status  *int              `json:"status,omitempty"`
}

// MultiUsersResponse defines model for MultiUsersResponse.
type MultiUsersResponse struct {
	Data    *[]UserResponse `json:"data,omitempty"`
	Message *string         `json:"message,omitempty"`
	Status  *int            `json:"status,omitempty"`
}

// PutProfileRequest defines model for PutProfileRequest.
type PutProfileRequest struct {
	AddressLine1       string    `json:"addressLine1"`
	AddressLine2       *string   `json:"addressLine2"`
	AddressType        *string   `json:"addressType,omitempty"`
	City               string    `json:"city"`
	Country            string    `json:"country"`
	DateOfBirth        time.Time `json:"dateOfBirth"`
	DepartmentId       *int64    `json:"departmentId,omitempty" validate:"numeric"`
	Dependents         *int32    `json:"dependents,omitempty"`
	EmergencyContactId *int64    `json:"emergencyContactId,omitempty" validate:"numeric"`
	GenderId           *int64    `json:"genderId,omitempty" validate:"string"`
	Id                 int64     `json:"id" validate:"numeric"`
	LatestContractId   *int64    `json:"latestContractId,omitempty" validate:"numeric"`
	MaritalStatusId    int64     `json:"maritalStatusId" validate:"numeric"`
	Nationality        string    `json:"nationality"`
	PostalCode         *string   `json:"postalCode"`
	State              *string   `json:"state"`
	UserId             int64     `json:"userId" validate:"numeric"`
}

// SingleUserResponse defines model for SingleUserResponse.
type SingleUserResponse struct {
	Data    *UserResponse `json:"data,omitempty"`
	Message *string       `json:"message,omitempty"`
	Status  *int          `json:"status,omitempty"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	Avatar    *string             `json:"avatar,omitempty" validate:"string"`
	Email     openapi_types.Email `json:"email" validate:"email"`
	FirstName *string             `json:"firstName,omitempty" validate:"string"`
	LastName  *string             `json:"lastName,omitempty" validate:"string"`
	Password  string              `json:"password" validate:"string"`
	Username  string              `json:"username" validate:"string"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	AddressLine1            *string              `json:"addressLine1,omitempty"`
	AddressLine2            *string              `json:"addressLine2,omitempty"`
	Avatar                  *string              `json:"avatar,omitempty"`
	City                    *string              `json:"city,omitempty"`
	Country                 *string              `json:"country,omitempty"`
	CreatedAt               *time.Time           `json:"createdAt,omitempty"`
	DateOfBirth             *time.Time           `json:"dateOfBirth,omitempty"`
	DepartmentName          *string              `json:"departmentName,omitempty"`
	Dependents              *int32               `json:"dependents,omitempty"`
	Email                   *openapi_types.Email `json:"email,omitempty"`
	EmergencyContactAddress *string              `json:"emergencyContactAddress,omitempty"`
	EmergencyContactName    *string              `json:"emergencyContactName,omitempty"`
	EmergencyContactNumber  *int32               `json:"emergencyContactNumber,omitempty"`
	FirstName               *string              `json:"firstName,omitempty"`
	Gender                  *string              `json:"gender,omitempty"`
	Id                      *int64               `json:"id,omitempty"`
	LastName                *string              `json:"lastName,omitempty"`
	MaritalStatus           *string              `json:"maritalStatus,omitempty"`
	Nationality             *string              `json:"nationality,omitempty"`
	PostalCode              *string              `json:"postalCode,omitempty"`
	Role                    *string              `json:"role,omitempty"`
	State                   *string              `json:"state,omitempty"`
	Status                  *string              `json:"status,omitempty"`
	UpdatedAt               *time.Time           `json:"updatedAt,omitempty"`
	Username                *string              `json:"username,omitempty"`
}

// GetGendersParams defines parameters for GetGenders.
type GetGendersParams struct {
	// Offset Page number of the users list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of users per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Offset Page number of the users list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of users per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostAuthJSONRequestBody defines body for PostAuth for application/json ContentType.
type PostAuthJSONRequestBody = LoginUserRequest

// PutProfilesJSONRequestBody defines body for PutProfiles for application/json ContentType.
type PutProfilesJSONRequestBody = PutProfileRequest

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserRequest

// PutUsersUserIdJSONRequestBody defines body for PutUsersUserId for application/json ContentType.
type PutUsersUserIdJSONRequestBody = UserRequest

// AsApiResponseData0 returns the union data inside the ApiResponse_Data as a ApiResponseData0
func (t ApiResponse_Data) AsApiResponseData0() (ApiResponseData0, error) {
	var body ApiResponseData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseData0 overwrites any union data inside the ApiResponse_Data as the provided ApiResponseData0
func (t *ApiResponse_Data) FromApiResponseData0(v ApiResponseData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseData0 performs a merge with any union data inside the ApiResponse_Data, using the provided ApiResponseData0
func (t *ApiResponse_Data) MergeApiResponseData0(v ApiResponseData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsApiResponseData1 returns the union data inside the ApiResponse_Data as a ApiResponseData1
func (t ApiResponse_Data) AsApiResponseData1() (ApiResponseData1, error) {
	var body ApiResponseData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseData1 overwrites any union data inside the ApiResponse_Data as the provided ApiResponseData1
func (t *ApiResponse_Data) FromApiResponseData1(v ApiResponseData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseData1 performs a merge with any union data inside the ApiResponse_Data, using the provided ApiResponseData1
func (t *ApiResponse_Data) MergeApiResponseData1(v ApiResponseData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApiResponse_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApiResponse_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get auth token
	// (POST /auth)
	PostAuth(c *gin.Context)
	// List Available Gender Options
	// (GET /genders)
	GetGenders(c *gin.Context, params GetGendersParams)
	// Update User profiles
	// (PUT /profiles)
	PutProfiles(c *gin.Context)
	// Get a list of users
	// (GET /users)
	GetUsers(c *gin.Context, params GetUsersParams)
	// Create a new user
	// (POST /users)
	PostUsers(c *gin.Context)
	// Delete a user
	// (DELETE /users/{userId})
	DeleteUsersUserId(c *gin.Context, userId int)
	// Get a user by ID
	// (GET /users/{userId})
	GetUsersUserId(c *gin.Context, userId int)
	// Update a user
	// (PUT /users/{userId})
	PutUsersUserId(c *gin.Context, userId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuth operation middleware
func (siw *ServerInterfaceWrapper) PostAuth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuth(c)
}

// GetGenders operation middleware
func (siw *ServerInterfaceWrapper) GetGenders(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGendersParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGenders(c, params)
}

// PutProfiles operation middleware
func (siw *ServerInterfaceWrapper) PutProfiles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProfiles(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{"admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c, params)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// DeleteUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersUserId(c, userId)
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserId(c, userId)
}

// PutUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersUserId(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth", wrapper.PostAuth)
	router.GET(options.BaseURL+"/genders", wrapper.GetGenders)
	router.PUT(options.BaseURL+"/profiles", wrapper.PutProfiles)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.DELETE(options.BaseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUsersUserId)
	router.PUT(options.BaseURL+"/users/:userId", wrapper.PutUsersUserId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1E3UdXWd74zFePG/AAAA//9j3OcpGyoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
