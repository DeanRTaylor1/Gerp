// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {
	AccessToken string `json:"access_token"`
}

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Data    *ApiResponse_Data `json:"data"`
	Message *string           `json:"message,omitempty"`
	Status  *int32            `json:"status,omitempty"`
}

// ApiResponseData0 defines model for .
type ApiResponseData0 = map[string]interface{}

// ApiResponseData1 defines model for .
type ApiResponseData1 = []map[string]interface{}

// ApiResponse_Data defines model for ApiResponse.Data.
type ApiResponse_Data struct {
	union json.RawMessage
}

// AuthorizationErrorResponse defines model for AuthorizationErrorResponse.
type AuthorizationErrorResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// BadRequestErrorResponse defines model for BadRequestErrorResponse.
type BadRequestErrorResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GenderResponse defines model for GenderResponse.
type GenderResponse struct {
	GenderName *string `json:"genderName,omitempty"`
	Id         *int64  `json:"id,omitempty"`
}

// LoginUserRequest defines model for LoginUserRequest.
type LoginUserRequest struct {
	Email    string `json:"email" validate:"email"`
	Password string `json:"password" validate:"min=8,matches=^[a-zA-Z0-9]*$"`
}

// LoginUserResponse defines model for LoginUserResponse.
type LoginUserResponse struct {
	Data    *AccessTokenResponse `json:"data,omitempty"`
	Message *string              `json:"message,omitempty"`
	Status  *int                 `json:"status,omitempty"`
}

// MaritalStatusesResponse defines model for MaritalStatusesResponse.
type MaritalStatusesResponse struct {
	Id         *int64  `json:"id,omitempty"`
	StatusName *string `json:"statusName,omitempty"`
}

// MultiGendersResponse defines model for MultiGendersResponse.
type MultiGendersResponse struct {
	Data    *[]GenderResponse `json:"data,omitempty"`
	Message *string           `json:"message,omitempty"`
	Status  *int              `json:"status,omitempty"`
}

// MultiMaritalStatusesResponse defines model for MultiMaritalStatusesResponse.
type MultiMaritalStatusesResponse struct {
	Data    *[]MaritalStatusesResponse `json:"data,omitempty"`
	Message *string                    `json:"message,omitempty"`
	Status  *int                       `json:"status,omitempty"`
}

// MultiUsersResponse defines model for MultiUsersResponse.
type MultiUsersResponse struct {
	Data    *[]UserResponse `json:"data,omitempty"`
	Message *string         `json:"message,omitempty"`
	Status  *int            `json:"status,omitempty"`
}

// PutProfileRequest defines model for PutProfileRequest.
type PutProfileRequest struct {
	AddressLine1       string    `json:"addressLine1"`
	AddressLine2       *string   `json:"addressLine2"`
	AddressType        *string   `json:"addressType,omitempty"`
	City               string    `json:"city"`
	Country            string    `json:"country"`
	DateOfBirth        time.Time `json:"dateOfBirth"`
	DepartmentId       *int64    `json:"departmentId,omitempty" validate:"numeric"`
	Dependents         *int32    `json:"dependents,omitempty"`
	EmergencyContactId *int64    `json:"emergencyContactId,omitempty" validate:"numeric"`
	GenderId           *int64    `json:"genderId,omitempty" validate:"string"`
	Id                 int64     `json:"id" validate:"numeric"`
	LatestContractId   *int64    `json:"latestContractId,omitempty" validate:"numeric"`
	MaritalStatusId    int64     `json:"maritalStatusId" validate:"numeric"`
	Nationality        string    `json:"nationality"`
	PostalCode         *string   `json:"postalCode"`
	State              *string   `json:"state"`
	UserId             int64     `json:"userId" validate:"numeric"`
}

// SingleUserResponse defines model for SingleUserResponse.
type SingleUserResponse struct {
	Data    *UserResponse `json:"data,omitempty"`
	Message *string       `json:"message,omitempty"`
	Status  *int          `json:"status,omitempty"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	Avatar    *string             `json:"avatar,omitempty" validate:"string"`
	Email     openapi_types.Email `json:"email" validate:"email"`
	FirstName *string             `json:"firstName,omitempty" validate:"string"`
	LastName  *string             `json:"lastName,omitempty" validate:"string"`
	Password  string              `json:"password" validate:"string"`
	Username  string              `json:"username" validate:"string"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	AddressLine1            *string              `json:"addressLine1,omitempty"`
	AddressLine2            *string              `json:"addressLine2,omitempty"`
	Avatar                  *string              `json:"avatar,omitempty"`
	City                    *string              `json:"city,omitempty"`
	Country                 *string              `json:"country,omitempty"`
	CreatedAt               *time.Time           `json:"createdAt,omitempty"`
	DateOfBirth             *time.Time           `json:"dateOfBirth,omitempty"`
	DepartmentName          *string              `json:"departmentName,omitempty"`
	Dependents              *int32               `json:"dependents,omitempty"`
	Email                   *openapi_types.Email `json:"email,omitempty"`
	EmergencyContactAddress *string              `json:"emergencyContactAddress,omitempty"`
	EmergencyContactName    *string              `json:"emergencyContactName,omitempty"`
	EmergencyContactNumber  *int32               `json:"emergencyContactNumber,omitempty"`
	FirstName               *string              `json:"firstName,omitempty"`
	Gender                  *string              `json:"gender,omitempty"`
	Id                      *int64               `json:"id,omitempty"`
	LastName                *string              `json:"lastName,omitempty"`
	MaritalStatus           *string              `json:"maritalStatus,omitempty"`
	Nationality             *string              `json:"nationality,omitempty"`
	PostalCode              *string              `json:"postalCode,omitempty"`
	Role                    *string              `json:"role,omitempty"`
	State                   *string              `json:"state,omitempty"`
	Status                  *string              `json:"status,omitempty"`
	UpdatedAt               *time.Time           `json:"updatedAt,omitempty"`
	Username                *string              `json:"username,omitempty"`
}

// GetGendersParams defines parameters for GetGenders.
type GetGendersParams struct {
	// Offset Page number of the genders list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of genders per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetMaritalStatusesParams defines parameters for GetMaritalStatuses.
type GetMaritalStatusesParams struct {
	// Offset Page number of the list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Offset Page number of the users list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of users per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostAuthJSONRequestBody defines body for PostAuth for application/json ContentType.
type PostAuthJSONRequestBody = LoginUserRequest

// PutProfilesJSONRequestBody defines body for PutProfiles for application/json ContentType.
type PutProfilesJSONRequestBody = PutProfileRequest

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserRequest

// PutUsersUserIdJSONRequestBody defines body for PutUsersUserId for application/json ContentType.
type PutUsersUserIdJSONRequestBody = UserRequest

// AsApiResponseData0 returns the union data inside the ApiResponse_Data as a ApiResponseData0
func (t ApiResponse_Data) AsApiResponseData0() (ApiResponseData0, error) {
	var body ApiResponseData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseData0 overwrites any union data inside the ApiResponse_Data as the provided ApiResponseData0
func (t *ApiResponse_Data) FromApiResponseData0(v ApiResponseData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseData0 performs a merge with any union data inside the ApiResponse_Data, using the provided ApiResponseData0
func (t *ApiResponse_Data) MergeApiResponseData0(v ApiResponseData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsApiResponseData1 returns the union data inside the ApiResponse_Data as a ApiResponseData1
func (t ApiResponse_Data) AsApiResponseData1() (ApiResponseData1, error) {
	var body ApiResponseData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseData1 overwrites any union data inside the ApiResponse_Data as the provided ApiResponseData1
func (t *ApiResponse_Data) FromApiResponseData1(v ApiResponseData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseData1 performs a merge with any union data inside the ApiResponse_Data, using the provided ApiResponseData1
func (t *ApiResponse_Data) MergeApiResponseData1(v ApiResponseData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApiResponse_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApiResponse_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get auth token
	// (POST /auth)
	PostAuth(c *gin.Context)
	// List Available Gender Options
	// (GET /genders)
	GetGenders(c *gin.Context, params GetGendersParams)
	// List Available Marital Status Options for Forms
	// (GET /marital-statuses)
	GetMaritalStatuses(c *gin.Context, params GetMaritalStatusesParams)
	// Update User profiles
	// (PUT /profiles)
	PutProfiles(c *gin.Context)
	// Get a list of users
	// (GET /users)
	GetUsers(c *gin.Context, params GetUsersParams)
	// Create a new user
	// (POST /users)
	PostUsers(c *gin.Context)
	// Delete a user
	// (DELETE /users/{userId})
	DeleteUsersUserId(c *gin.Context, userId int)
	// Get a user by ID
	// (GET /users/{userId})
	GetUsersUserId(c *gin.Context, userId int)
	// Update a user
	// (PUT /users/{userId})
	PutUsersUserId(c *gin.Context, userId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuth operation middleware
func (siw *ServerInterfaceWrapper) PostAuth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuth(c)
}

// GetGenders operation middleware
func (siw *ServerInterfaceWrapper) GetGenders(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGendersParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGenders(c, params)
}

// GetMaritalStatuses operation middleware
func (siw *ServerInterfaceWrapper) GetMaritalStatuses(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMaritalStatusesParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMaritalStatuses(c, params)
}

// PutProfiles operation middleware
func (siw *ServerInterfaceWrapper) PutProfiles(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProfiles(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{"Administrator"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c, params)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// DeleteUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersUserId(c, userId)
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserId(c, userId)
}

// PutUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersUserId(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth", wrapper.PostAuth)
	router.GET(options.BaseURL+"/genders", wrapper.GetGenders)
	router.GET(options.BaseURL+"/marital-statuses", wrapper.GetMaritalStatuses)
	router.PUT(options.BaseURL+"/profiles", wrapper.PutProfiles)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.DELETE(options.BaseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUsersUserId)
	router.PUT(options.BaseURL+"/users/:userId", wrapper.PutUsersUserId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tkEvAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
