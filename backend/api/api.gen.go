// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {
	AccessToken string `json:"access_token"`
}

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Data    *ApiResponse_Data `json:"data"`
	Message *string           `json:"message,omitempty"`
	Status  *int32            `json:"status,omitempty"`
}

// ApiResponseData0 defines model for .
type ApiResponseData0 = map[string]interface{}

// ApiResponseData1 defines model for .
type ApiResponseData1 = []map[string]interface{}

// ApiResponse_Data defines model for ApiResponse.Data.
type ApiResponse_Data struct {
	union json.RawMessage
}

// AuthorizationErrorResponse defines model for AuthorizationErrorResponse.
type AuthorizationErrorResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// BadRequestErrorResponse defines model for BadRequestErrorResponse.
type BadRequestErrorResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// LoginUserRequest defines model for LoginUserRequest.
type LoginUserRequest struct {
	Email    string `json:"email" validate:"email"`
	Password string `json:"password" validate:"min=8,matches=^[a-zA-Z0-9]*$"`
}

// LoginUserResponse defines model for LoginUserResponse.
type LoginUserResponse struct {
	Data    *AccessTokenResponse `json:"data,omitempty"`
	Message *string              `json:"message,omitempty"`
	Status  *int                 `json:"status,omitempty"`
}

// MultiUsersResponse defines model for MultiUsersResponse.
type MultiUsersResponse struct {
	Data    *[]UserResponse `json:"data,omitempty"`
	Message *string         `json:"message,omitempty"`
	Status  *int            `json:"status,omitempty"`
}

// SingleUserResponse defines model for SingleUserResponse.
type SingleUserResponse struct {
	Data    *UserResponse `json:"data,omitempty"`
	Message *string       `json:"message,omitempty"`
	Status  *int          `json:"status,omitempty"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	Avatar    *string             `json:"avatar,omitempty" validate:"string"`
	Email     openapi_types.Email `json:"email" validate:"email"`
	FirstName *string             `json:"firstName,omitempty" validate:"string"`
	LastName  *string             `json:"lastName,omitempty" validate:"string"`
	Password  string              `json:"password" validate:"string"`
	Username  string              `json:"username" validate:"string"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Avatar    *string              `json:"avatar,omitempty"`
	CreatedAt *time.Time           `json:"createdAt,omitempty"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	FirstName *string              `json:"firstName,omitempty"`
	Id        *int64               `json:"id,omitempty"`
	LastName  *string              `json:"lastName,omitempty"`
	Role      *string              `json:"role,omitempty"`
	Status    *string              `json:"status,omitempty"`
	UpdatedAt *time.Time           `json:"updatedAt,omitempty"`
	Username  *string              `json:"username,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Offset Page number of the users list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of users per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostAuthJSONRequestBody defines body for PostAuth for application/json ContentType.
type PostAuthJSONRequestBody = LoginUserRequest

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserRequest

// PutUsersUserIdJSONRequestBody defines body for PutUsersUserId for application/json ContentType.
type PutUsersUserIdJSONRequestBody = UserRequest

// AsApiResponseData0 returns the union data inside the ApiResponse_Data as a ApiResponseData0
func (t ApiResponse_Data) AsApiResponseData0() (ApiResponseData0, error) {
	var body ApiResponseData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseData0 overwrites any union data inside the ApiResponse_Data as the provided ApiResponseData0
func (t *ApiResponse_Data) FromApiResponseData0(v ApiResponseData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseData0 performs a merge with any union data inside the ApiResponse_Data, using the provided ApiResponseData0
func (t *ApiResponse_Data) MergeApiResponseData0(v ApiResponseData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsApiResponseData1 returns the union data inside the ApiResponse_Data as a ApiResponseData1
func (t ApiResponse_Data) AsApiResponseData1() (ApiResponseData1, error) {
	var body ApiResponseData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseData1 overwrites any union data inside the ApiResponse_Data as the provided ApiResponseData1
func (t *ApiResponse_Data) FromApiResponseData1(v ApiResponseData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseData1 performs a merge with any union data inside the ApiResponse_Data, using the provided ApiResponseData1
func (t *ApiResponse_Data) MergeApiResponseData1(v ApiResponseData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApiResponse_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApiResponse_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get auth token
	// (POST /auth)
	PostAuth(c *gin.Context)
	// Get a list of users
	// (GET /users)
	GetUsers(c *gin.Context, params GetUsersParams)
	// Create a new user
	// (POST /users)
	PostUsers(c *gin.Context)
	// Delete a user
	// (DELETE /users/{userId})
	DeleteUsersUserId(c *gin.Context, userId int)
	// Get a user by ID
	// (GET /users/{userId})
	GetUsersUserId(c *gin.Context, userId int)
	// Update a user
	// (PUT /users/{userId})
	PutUsersUserId(c *gin.Context, userId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuth operation middleware
func (siw *ServerInterfaceWrapper) PostAuth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuth(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{"admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c, params)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// DeleteUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersUserId(c, userId)
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserId(c, userId)
}

// PutUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersUserId(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth", wrapper.PostAuth)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.DELETE(options.BaseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUsersUserId)
	router.PUT(options.BaseURL+"/users/:userId", wrapper.PutUsersUserId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYbW/bNhD+KwTXT4NsK20wdAIKLFm7IsPaBm2zAQu84SydbaYSqZKntG7g/z7wKL9J",
	"cpwsrtsvdU0feW/P8/CYG5maojQaNTmZ3EiXTrEA/u9JmqJz780H1G/RlUY79MulNSVaUshGwEb/krfy",
	"3/EzFGWOMpFXnyisRpJmpV9xZJWeyPk8khY/VspiJpPLzSOGS2szusKU5DySJ6XaHkAGBP5TV3kOI++Z",
	"bIWRNBrfjGVyedM670YqwoI3t1zVC2AtzOR8OI9kgc7BBNesF2lE0hFQxQeNjS2AZCKVpiePVykrTThB",
	"yzm386poaqz6AqSMfmGtsdvTTE2GG/U9jo+i3W434l/15kJD7Ruzzv60Yj2F7C1+rNDR/QON/3+gI8iE",
	"DX7vFucfZqL0hUNbR9sOEAtQeQOqZqr7rlA0/YV/7aemaLmL5OeegVL1fIYT1D38TBZ6BBM+9hpylQH5",
	"DcGDD68E5z4Zm31Vd4XSz55GBVA6Rffsn0vofTnp/R33fh7++EjOm2wLwa2FNry9irt498jiWCbyh8FK",
	"Rwa1iAy6FGRbp13Fxu0ur9Nsaf7Yg+ouHHtV5aR8Jm53KktZuC2njaq0FOOwyb1TepLjw/vUzOmQOdzK",
	"VbgGAtuI40kfCvhitKfNoJgFm/5VOXkAh9Yk5e76sBS1BaceLhhjZR29hgLbAewnuxy6zufc9uPgIJK3",
	"5q9yaHVnwdjd0T68NCR06TJqq+mSDMOtWN86Sj0M7PNIphaBMDuhjZHEZ9MjxfG2tmxB+73Bfk/sziOp",
	"subg9NNx52BwH8j6Tpl817TW+qkqs/sW7t6461A/HxSmlVU0e+elOOBghGDR+uFw9e23RUy///XeY4yt",
	"/XzEv658TYnKAFilx4b1H11qVelHTJn4UVoE1RdjY8WLt+diBOkH1FnfH6KIs3hTohbvTGVTZJOT8zMZ",
	"yWu0LpwS9+P+kS+CKVFDqWQin/TjfsxEoClnMYA6gdIEZfdQ50n3LJOJPDeOOMVALXR0arJZGCA1oeYt",
	"UJa5SnnT4MoZvXqg7LrRWmNgg8T+jcALgYwc8eP46Gv4X1yrPoDNZvBgJH4NpPXlPI7jvUWwbWDviONM",
	"s+iJhYj1Qyz7q8YtD527heOJUhUF2JlM5Esk4cElls9Llu5Lfk+hpjpGOfTbBp6n3N4JdsDwJRIPh4xc",
	"CwUSW182eXMOExS6KkZohRkLmqLgg0Wu+GWivNHHCu1MRjLIgjTjsUNasBUCGcdQ5SSTzuGo6fT10l/w",
	"VaIVpZ/Luv3lqlBb3B11+Ru28L8/9HWM3R2dPuHyLRP8hhQ4hUzUtt8J+hncjF6hTQB8jW1cMKK+Ohiu",
	"65fGpYSsUJ4AwxZvGhVfkcc3S7wCDRMsfMpDP8ttle4Fab6Gdn9D2e54UHW06DV+4vKJ9JtL959hWlVG",
	"C7ZtSGW4WwQIXYd8a8OXcjm48R9n2TyISI6EbRg853UGwgVbtzWUVcpPBCuRqhamm01dV607CNXx/si5",
	"9rfFjvpykUIFskZtQ/4Cdtc1uv3uOXj14gPz5UQ4tguV6rjMA5tGM3H2fJciVV2CVB2ukN+B3MUHBX/9",
	"NGq07YJX7wL+cFPZ6+65KsNrUVn/nPT/hvdLMhjkJoV8ahwlT+On8QBKNbg+kr4DtaObRSNPw+tFtqen",
	"NwuMOGEx9zkIMgFpsDkoLlHRGCDbZ77QWWmUJsevp8LnqfSkPjRNTaXJrY5rFmM+nP8XAAD//2HU5rBv",
	"GQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
