// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for UserRequestRole.
const (
	UserRequestRoleAdmin   UserRequestRole = "admin"
	UserRequestRoleManager UserRequestRole = "manager"
	UserRequestRoleUser    UserRequestRole = "user"
)

// Defines values for UserRequestStatus.
const (
	UserRequestStatusActive   UserRequestStatus = "active"
	UserRequestStatusInactive UserRequestStatus = "inactive"
)

// Defines values for UserResponseRole.
const (
	UserResponseRoleAdmin   UserResponseRole = "admin"
	UserResponseRoleManager UserResponseRole = "manager"
	UserResponseRoleUser    UserResponseRole = "user"
)

// Defines values for UserResponseStatus.
const (
	UserResponseStatusActive   UserResponseStatus = "active"
	UserResponseStatusInactive UserResponseStatus = "inactive"
)

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {
	AccessToken string `json:"access_token"`
}

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Data    *ApiResponse_Data `json:"data"`
	Message *string           `json:"message,omitempty"`
	Status  *int32            `json:"status,omitempty"`
}

// ApiResponseData0 defines model for .
type ApiResponseData0 = map[string]interface{}

// ApiResponseData1 defines model for .
type ApiResponseData1 = []map[string]interface{}

// ApiResponse_Data defines model for ApiResponse.Data.
type ApiResponse_Data struct {
	union json.RawMessage
}

// AuthorizationErrorResponse defines model for AuthorizationErrorResponse.
type AuthorizationErrorResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// BadRequestErrorResponse defines model for BadRequestErrorResponse.
type BadRequestErrorResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// LoginUserRequest defines model for LoginUserRequest.
type LoginUserRequest struct {
	Email    string `json:"email" validate:"email"`
	Password string `json:"password" validate:"min=8,matches=^[a-zA-Z0-9]*$"`
}

// LoginUserResponse defines model for LoginUserResponse.
type LoginUserResponse struct {
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
	Status  *int                    `json:"status,omitempty"`
}

// MultiUsersResponse defines model for MultiUsersResponse.
type MultiUsersResponse struct {
	Data    *[]UserResponse `json:"data,omitempty"`
	Message *string         `json:"message,omitempty"`
	Status  *int            `json:"status,omitempty"`
}

// SingleUserResponse defines model for SingleUserResponse.
type SingleUserResponse struct {
	Data    *UserResponse `json:"data,omitempty"`
	Message *string       `json:"message,omitempty"`
	Status  *int          `json:"status,omitempty"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	Email     openapi_types.Email `json:"email" validate:"email"`
	FirstName *string             `json:"firstName,omitempty" validate:"string"`
	LastName  *string             `json:"lastName,omitempty" validate:"string"`
	Password  string              `json:"password" validate:"string"`
	Role      *UserRequestRole    `json:"role,omitempty"`
	Status    UserRequestStatus   `json:"status" validate:"oneOf=active,inactive"`
	Username  string              `json:"username" validate:"string"`
}

// UserRequestRole defines model for UserRequest.Role.
type UserRequestRole string

// UserRequestStatus defines model for UserRequest.Status.
type UserRequestStatus string

// UserResponse defines model for UserResponse.
type UserResponse struct {
	CreatedAt *time.Time           `json:"createdAt,omitempty"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	FirstName *string              `json:"firstName,omitempty"`
	Id        *int64               `json:"id,omitempty"`
	LastName  *string              `json:"lastName,omitempty"`
	Role      *UserResponseRole    `json:"role,omitempty"`
	Status    *UserResponseStatus  `json:"status,omitempty"`
	UpdatedAt *time.Time           `json:"updatedAt,omitempty"`
	Username  *string              `json:"username,omitempty"`
}

// UserResponseRole defines model for UserResponse.Role.
type UserResponseRole string

// UserResponseStatus defines model for UserResponse.Status.
type UserResponseStatus string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Offset Page number of the users list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of users per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostAuthJSONRequestBody defines body for PostAuth for application/json ContentType.
type PostAuthJSONRequestBody = LoginUserRequest

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserRequest

// PutUsersUserIdJSONRequestBody defines body for PutUsersUserId for application/json ContentType.
type PutUsersUserIdJSONRequestBody = UserRequest

// AsApiResponseData0 returns the union data inside the ApiResponse_Data as a ApiResponseData0
func (t ApiResponse_Data) AsApiResponseData0() (ApiResponseData0, error) {
	var body ApiResponseData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseData0 overwrites any union data inside the ApiResponse_Data as the provided ApiResponseData0
func (t *ApiResponse_Data) FromApiResponseData0(v ApiResponseData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseData0 performs a merge with any union data inside the ApiResponse_Data, using the provided ApiResponseData0
func (t *ApiResponse_Data) MergeApiResponseData0(v ApiResponseData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsApiResponseData1 returns the union data inside the ApiResponse_Data as a ApiResponseData1
func (t ApiResponse_Data) AsApiResponseData1() (ApiResponseData1, error) {
	var body ApiResponseData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseData1 overwrites any union data inside the ApiResponse_Data as the provided ApiResponseData1
func (t *ApiResponse_Data) FromApiResponseData1(v ApiResponseData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseData1 performs a merge with any union data inside the ApiResponse_Data, using the provided ApiResponseData1
func (t *ApiResponse_Data) MergeApiResponseData1(v ApiResponseData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApiResponse_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApiResponse_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get auth token
	// (POST /auth)
	PostAuth(c *gin.Context)
	// Get a list of users
	// (GET /users)
	GetUsers(c *gin.Context, params GetUsersParams)
	// Create a new user
	// (POST /users)
	PostUsers(c *gin.Context)
	// Delete a user
	// (DELETE /users/{userId})
	DeleteUsersUserId(c *gin.Context, userId int)
	// Get a user by ID
	// (GET /users/{userId})
	GetUsersUserId(c *gin.Context, userId int)
	// Update a user
	// (PUT /users/{userId})
	PutUsersUserId(c *gin.Context, userId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuth operation middleware
func (siw *ServerInterfaceWrapper) PostAuth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuth(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{"admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c, params)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// DeleteUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersUserId(c, userId)
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserId(c, userId)
}

// PutUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersUserId(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth", wrapper.PostAuth)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.DELETE(options.BaseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUsersUserId)
	router.PUT(options.BaseURL+"/users/:userId", wrapper.PutUsersUserId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYb4/TxhP+Kqv98eonJ/HBqaKWkBoKRVcVOAHXSj251caeJAv2rtkdB8Ip373aWdtJ",
	"bOcugZDjDZc4451/z/PMLDc80XmhFSi0PLrhNplDLujjOEnA2nf6A6g3YAutLLjHhdEFGJRARoKM/kVn",
	"5b7DZ5EXGfCIv/+E/mnAcVm4JxaNVDO+WgXcwMdSGkh5dL19RNxY68l7SJCvAj4u5O4AUoHC/VVllomJ",
	"84ymhIBrBa+nPLq+6Zx3wyVCTi93XFUPhDFiyVfxKuA5WCtmsGFdpxFwiwJLOmiqTS6QR1wqfPRwnbJU",
	"CDMwlHM3rxLn2sgvAqVWz43RZneaiU5hq77n4Vlwt9ut+Ne9uVKi8g1pb386sT4V6Rv4WILFwwMNvz7Q",
	"iUiZ8X73i/MPPZPqyoKpou0GCLmQWQuqeq6GNpc4/4V+HSY677gL+OeBFoUcuAxnoAbwGY0YoJjRsQuR",
	"yVSge8F7cOEVwtpP2qTf1V0u1ZPHQS4wmYN98s+1GHwZD/4OBz/H/3/AV222+eA2Qotvr+JdvGu49MDA",
	"lEf8f6O1oIwqNRn1SUlf93oxYEt6u9v/TQI25g8d3PZh38syQ+lytEdKcqteHS05bXJvpZplsF8HD8np",
	"lDkcicWN9NTI/3ZaT6Wx+Erk0A3gG87fkLVM9J1PuR3HwUmEaXPe68wno8qcZn6aS1er0oLhAc+FEg4H",
	"8e0Qql9OUC6AB1yq6mP89UHSnvDEnxM0B7qYXWyqt8lUorNjVKYlzo3LoKvTTSXinVzZOZMNCIR0jFur",
	"iotlgJK8daq+g18H0+tAtqwCLtP2QvXTee/CcAhJ7gGCDkFFemjdDwZdj3S6iCEpjcTlW6fjHgQTEAaM",
	"2znX336rY/r9r3cOYGTt1i76de1rjlh4tEo11TQ8wCZGFm5z5ZHb0JkfGWyqDXv+5pJNRPIBVDp0h0ik",
	"LF4XoNhbXZoEyGR8ecEDvgBj/SnhMByeuSLoApQoJI/4o2E4DIkFOKcsRqJKoNB+LDic0wJ9kfKIX2qL",
	"lKLnFVh8qtOl30sVgqJXRFFkMqGXRu+tVut7z13jsLNdthjsrh70wDORIn4Ynn0P//VMdgFsN4PWLPar",
	"57wr53kYHi2CXfeAnjguFCkeqxVs6GM5XjVuuT/tF44jSpnnwix5xF8AMgcu1txaSbev6ZoGCqsYeexe",
	"GzmeUntn0APDF4C0WRJyjcgByfq6zZtLMQOmynwChukpwzkwOphlki480hl9LMEsecC9LHA9nVrAmq3C",
	"k3Eqygx51LtZtZ2+avx5XwUYVrilrt9fJnO5w91Zn7+4g//joa9nZ+/p9JjK1yR4jxR4KlJW2f4g6Cdw",
	"E3qZ0h7wFbahZkQ1Ogium0OjHpmxa3GLN62Kr8njmsVe0mzNXcqxWz53SndNmu+h3fco2z23sZ4WvYJP",
	"VD6W3Lt0/+lXVakVI9uWVPrZwgRTVci3NryRy9GN+3ORrryIZIDQhcEzek5AuCLrroaSSrmNYC1SZW26",
	"3dRN1dpDqM6PR86N/7LsqS8VyVcgbdXW58/E3XUNbp89J69eeGK+jJklO1+pnmHu2TRZsotndylS2SdI",
	"5ekK+QPIXXhS8FdXo1bbrujpPuD3k8os+veqFBasNO426v7195doNMp0IrK5thg9Dh+HI1HI0eKMuw5U",
	"jtrnvK4BYZmBzAXMUHtYie2tsIFAa1vsrl/PVVpoqdDSVYmunVLNqkOTRJcK7fq4duarePVfAAAA//+c",
	"i1mssxkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
