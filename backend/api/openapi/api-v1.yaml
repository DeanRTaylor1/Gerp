openapi: 3.0.0
info:
  title: Open Source ERP API
  description: Api schema for ERP backend.
  version: 0.0.1
tags:
  - name: Backend
  - name: Authentication
    description: Operations related to user authentication
  - name: User Management
    description: Endpoints for managing user accounts

servers:
  - url: http://localhost:8080/api/v1
    description: dev url
paths:
  /profiles:
    put:
      tags:
        - Profiles
      summary: Update User profiles
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutProfileRequest"
      responses:
        "201":
          description: Profile Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          description: Not Authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationErrorResponse"
        "400":
          description: Validation Errors.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponse"
  /genders:
    get:
      tags:
        - Genders
      summary: List Available Gender Options
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Page number of the users list
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of users per page
      responses:
        "200":
          description: A list of genders
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiGendersResponse"
        "401":
          description: Invalid token/user not authenticated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationErrorResponse"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponse"
  /auth:
    post:
      tags:
        - Authentication
      summary: Get auth token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserRequest"
      responses:
        "201":
          description: Token Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUserResponse"
        "401":
          description: Invalid password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationErrorResponse"
        "400":
          description: Invalid password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponse"
  /users:
    get:
      tags:
        - User Management
      summary: Get a list of users
      security:
        - bearerAuth: ["Administrator"]
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Page number of the users list
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of users per page
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiUsersResponse"
        "401":
          description: Invalid token/user not authenticated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationErrorResponse"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponse"
    post:
      tags:
        - User Management
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: New user created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleUserResponse"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponse"
  /users/{userId}:
    get:
      tags:
        - User Management
      summary: Get a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A single user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleUserResponse"
    put:
      tags:
        - User Management
      summary: Update a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    delete:
      tags:
        - User Management
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: "john.smith@email.com"
          x-oapi-codegen-extra-tags:
            validate: email
        password:
          type: string
          example: "john.smith@email.com"
          x-oapi-codegen-extra-tags:
            validate: "min=8,matches=^[a-zA-Z0-9]*$"
    PutProfileRequest:
      type: object
      required:
        - id
        - userId
        - dateOfBirth
        - nationality
        - maritalStatusId
        - addressLine1
        - city
        - country
      properties:
        id:
          type: integer
          format: int64
          example: 1
          x-oapi-codegen-extra-tags:
            validate: numeric
        userId:
          type: integer
          format: int64
          example: 1
          x-oapi-codegen-extra-tags:
            validate: numeric
        genderId:
          type: integer
          format: int64
          example: 1
          x-oapi-codegen-extra-tags:
            validate: string
        dateOfBirth:
          type: string
          format: date-time
          example: "1990-01-01T00:00:00Z"
        nationality:
          type: string
          example: "British"
        maritalStatusId:
          type: integer
          format: int64
          example: 1
          x-oapi-codegen-extra-tags:
            validate: numeric
        dependents:
          type: integer
          format: int32
          example: 2
        emergencyContactId:
          type: integer
          format: int64
          example: 1
          x-oapi-codegen-extra-tags:
            validate: numeric
        departmentId:
          type: integer
          format: int64
          example: 1
          x-oapi-codegen-extra-tags:
            validate: numeric
        latestContractId:
          type: integer
          format: int64
          example: 1
          x-oapi-codegen-extra-tags:
            validate: numeric
        addressLine1:
          type: string
          example: "123 Main St"
        addressLine2:
          type: string
          example: "Apt 4"
          nullable: true
        city:
          type: string
          example: "Anytown"
        state:
          type: string
          example: "State"
          nullable: true
        postalCode:
          type: string
          example: "12345"
          nullable: true
        country:
          type: string
          example: "Country"
        addressType:
          type: string
          example: "residential"
          default: "residential"
    UserRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: "johnsmith1"
          x-oapi-codegen-extra-tags:
            validate: string
        firstName:
          type: string
          example: "john"
          x-oapi-codegen-extra-tags:
            validate: string
        lastName:
          type: string
          example: "smith"
          x-oapi-codegen-extra-tags:
            validate: string
        email:
          type: string
          format: email
          example: "john.smith@email.com"
          x-oapi-codegen-extra-tags:
            validate: email
        password:
          type: string
          example: "john.smith@email.com"
          x-oapi-codegen-extra-tags:
            validate: string
        avatar:
          type: string
          example: "s3.amazon.com/myavatar.jpg"
          x-oapi-codegen-extra-tags:
            validate: string
    GenderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        genderName:
          type: string
          example: Male
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          example: "johnsmith1"
        firstName:
          type: string
          example: "john"
        lastName:
          type: string
          example: "smith"
        email:
          type: string
          format: email
          example: "johnsmith@email.com"
        avatar:
          type: string
          example: "s3.amazon.com/myavatar.jpg"
        status:
          type: string
          example: active
        role:
          type: string
          example: user
        dateOfBirth:
          type: string
          format: date-time
        nationality:
          type: string
        dependents:
          type: integer
          format: int32
          example: 3
        emergencyContactName:
          type: string
          example: Jane Giblet
        emergencyContactNumber:
          type: integer
          format: int32
          example: 1231456987
        emergencyContactAddress:
          type: string
          example: 123 Downing Street
        departmentName:
          type: string
          example: Accounting
        gender:
          type: string
          example: Male
        maritalStatus:
          type: string
          example: Single
        addressLine1:
          type: string
          example: 1 Downing Street
        addressLine2:
          type: string
          example: E13
        city:
          type: string
          example: London
        state:
          type: string
          example: London
        country:
          type: string
          example: UK
        postalCode:
          type: string
          example: E13 9PB
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    BadRequestErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
          format: int32
        message:
          type: string
          example: "bad request"
    ServerSideErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 500
          format: int32
        message:
          type: string
          example: "something went wrong"
    AuthorizationErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 401
          format: int32
        message:
          type: string
          example: "Unauthorized"
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
          format: int32
        message:
          type: string
          example: "bad request."
    ApiResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
        data:
          oneOf:
            - type: object
            - type: array
              items:
                type: object
          nullable: true
    SingleUserResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: success
        data:
          $ref: "#/components/schemas/UserResponse"
    MultiGendersResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: success
        data:
          type: array
          items:
            $ref: "#/components/schemas/GenderResponse"
    MultiUsersResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: success
        data:
          type: array
          items:
            $ref: "#/components/schemas/UserResponse"
    AccessTokenResponse:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          example: jwttoken
    LoginUserResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: success
        data:
          $ref: "#/components/schemas/AccessTokenResponse"
    JwtPayload:
      type: object
      required:
        - id
        - user_id
        - email
        - roles
        - iat
        - exp
      properties:
        id:
          type: integer
          example: 0795b10d-b28a-460d-bac5-182e52efb590
        user_id:
          type: integer
          example: 1
        email:
          type: string
          example: john.smith1@email.com
        roles:
          type: string
          example: Administrator
        iat:
          type: int
        exp:
          type: int
