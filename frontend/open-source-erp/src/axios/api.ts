/* tslint:disable */
/* eslint-disable */
/**
 * Open Source ERP API
 * Api schema for ERP backend.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponse
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    'message'?: string;
    /**
     * 
     * @type {ApiResponseData}
     * @memberof ApiResponse
     */
    'data'?: ApiResponseData | null;
}
/**
 * @type ApiResponseData
 * @export
 */
export type ApiResponseData = Array<object> | object;

/**
 * 
 * @export
 * @interface AuthorizationErrorResponse
 */
export interface AuthorizationErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof AuthorizationErrorResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationErrorResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface BadRequestErrorResponse
 */
export interface BadRequestErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof BadRequestErrorResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof BadRequestErrorResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GenderResponse
 */
export interface GenderResponse {
    /**
     * 
     * @type {number}
     * @memberof GenderResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GenderResponse
     */
    'genderName'?: string;
}
/**
 * 
 * @export
 * @interface JwtPayload
 */
export interface JwtPayload {
    /**
     * 
     * @type {number}
     * @memberof JwtPayload
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof JwtPayload
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof JwtPayload
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof JwtPayload
     */
    'roles': string;
    /**
     * 
     * @type {number}
     * @memberof JwtPayload
     */
    'iat': number;
    /**
     * 
     * @type {number}
     * @memberof JwtPayload
     */
    'exp': number;
}
/**
 * 
 * @export
 * @interface LoginUserRequest
 */
export interface LoginUserRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginUserRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginUserResponse
 */
export interface LoginUserResponse {
    /**
     * 
     * @type {number}
     * @memberof LoginUserResponse
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginUserResponse
     */
    'message'?: string;
    /**
     * 
     * @type {AccessTokenResponse}
     * @memberof LoginUserResponse
     */
    'data'?: AccessTokenResponse;
}
/**
 * 
 * @export
 * @interface MaritalStatusesResponse
 */
export interface MaritalStatusesResponse {
    /**
     * 
     * @type {number}
     * @memberof MaritalStatusesResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaritalStatusesResponse
     */
    'statusName'?: string;
}
/**
 * 
 * @export
 * @interface MultiGendersResponse
 */
export interface MultiGendersResponse {
    /**
     * 
     * @type {number}
     * @memberof MultiGendersResponse
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof MultiGendersResponse
     */
    'message'?: string;
    /**
     * 
     * @type {Array<GenderResponse>}
     * @memberof MultiGendersResponse
     */
    'data'?: Array<GenderResponse>;
}
/**
 * 
 * @export
 * @interface MultiMaritalStatusesResponse
 */
export interface MultiMaritalStatusesResponse {
    /**
     * 
     * @type {number}
     * @memberof MultiMaritalStatusesResponse
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof MultiMaritalStatusesResponse
     */
    'message'?: string;
    /**
     * 
     * @type {Array<MaritalStatusesResponse>}
     * @memberof MultiMaritalStatusesResponse
     */
    'data'?: Array<MaritalStatusesResponse>;
}
/**
 * 
 * @export
 * @interface MultiUserStatusesResponse
 */
export interface MultiUserStatusesResponse {
    /**
     * 
     * @type {number}
     * @memberof MultiUserStatusesResponse
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof MultiUserStatusesResponse
     */
    'message'?: string;
    /**
     * 
     * @type {Array<UserStatusesResponse>}
     * @memberof MultiUserStatusesResponse
     */
    'data'?: Array<UserStatusesResponse>;
}
/**
 * 
 * @export
 * @interface MultiUsersResponse
 */
export interface MultiUsersResponse {
    /**
     * 
     * @type {number}
     * @memberof MultiUsersResponse
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof MultiUsersResponse
     */
    'message'?: string;
    /**
     * 
     * @type {Array<UserResponse>}
     * @memberof MultiUsersResponse
     */
    'data'?: Array<UserResponse>;
}
/**
 * 
 * @export
 * @interface PutProfileRequest
 */
export interface PutProfileRequest {
    /**
     * 
     * @type {number}
     * @memberof PutProfileRequest
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof PutProfileRequest
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof PutProfileRequest
     */
    'genderId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PutProfileRequest
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {string}
     * @memberof PutProfileRequest
     */
    'nationality': string;
    /**
     * 
     * @type {number}
     * @memberof PutProfileRequest
     */
    'maritalStatusId': number;
    /**
     * 
     * @type {number}
     * @memberof PutProfileRequest
     */
    'dependents'?: number;
    /**
     * 
     * @type {number}
     * @memberof PutProfileRequest
     */
    'emergencyContactId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PutProfileRequest
     */
    'departmentId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PutProfileRequest
     */
    'latestContractId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PutProfileRequest
     */
    'addressLine1': string;
    /**
     * 
     * @type {string}
     * @memberof PutProfileRequest
     */
    'addressLine2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PutProfileRequest
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof PutProfileRequest
     */
    'state'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PutProfileRequest
     */
    'postalCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PutProfileRequest
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof PutProfileRequest
     */
    'addressType'?: string;
}
/**
 * 
 * @export
 * @interface ServerSideErrorResponse
 */
export interface ServerSideErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ServerSideErrorResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServerSideErrorResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface SingleUserResponse
 */
export interface SingleUserResponse {
    /**
     * 
     * @type {number}
     * @memberof SingleUserResponse
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof SingleUserResponse
     */
    'message'?: string;
    /**
     * 
     * @type {UserResponse}
     * @memberof SingleUserResponse
     */
    'data'?: UserResponse;
}
/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'avatar'?: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    'profileId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'nationality'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    'dependents'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'emergencyContactName'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    'emergencyContactNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'emergencyContactAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'departmentName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'maritalStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'addressLine1'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'addressLine2'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'postalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UserStatusesResponse
 */
export interface UserStatusesResponse {
    /**
     * 
     * @type {number}
     * @memberof UserStatusesResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserStatusesResponse
     */
    'statusName'?: string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get auth token
         * @param {LoginUserRequest} loginUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPost: async (loginUserRequest: LoginUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserRequest' is not null or undefined
            assertParamExists('authPost', 'loginUserRequest', loginUserRequest)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get auth token
         * @param {LoginUserRequest} loginUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authPost(loginUserRequest: LoginUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authPost(loginUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.authPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Get auth token
         * @param {LoginUserRequest} loginUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPost(loginUserRequest: LoginUserRequest, options?: any): AxiosPromise<LoginUserResponse> {
            return localVarFp.authPost(loginUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Get auth token
     * @param {LoginUserRequest} loginUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authPost(loginUserRequest: LoginUserRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authPost(loginUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GendersApi - axios parameter creator
 * @export
 */
export const GendersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List Available Gender Options
         * @param {number} [offset] Page number of the genders list
         * @param {number} [limit] Number of genders per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gendersGet: async (offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GendersApi - functional programming interface
 * @export
 */
export const GendersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GendersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List Available Gender Options
         * @param {number} [offset] Page number of the genders list
         * @param {number} [limit] Number of genders per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gendersGet(offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultiGendersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gendersGet(offset, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GendersApi.gendersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GendersApi - factory interface
 * @export
 */
export const GendersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GendersApiFp(configuration)
    return {
        /**
         * 
         * @summary List Available Gender Options
         * @param {number} [offset] Page number of the genders list
         * @param {number} [limit] Number of genders per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gendersGet(offset?: number, limit?: number, options?: any): AxiosPromise<MultiGendersResponse> {
            return localVarFp.gendersGet(offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GendersApi - object-oriented interface
 * @export
 * @class GendersApi
 * @extends {BaseAPI}
 */
export class GendersApi extends BaseAPI {
    /**
     * 
     * @summary List Available Gender Options
     * @param {number} [offset] Page number of the genders list
     * @param {number} [limit] Number of genders per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GendersApi
     */
    public gendersGet(offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return GendersApiFp(this.configuration).gendersGet(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MaritalStatusesApi - axios parameter creator
 * @export
 */
export const MaritalStatusesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List Available Marital Status Options for Forms
         * @param {number} [offset] Page number of the list
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maritalStatusesGet: async (offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marital-statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MaritalStatusesApi - functional programming interface
 * @export
 */
export const MaritalStatusesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MaritalStatusesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List Available Marital Status Options for Forms
         * @param {number} [offset] Page number of the list
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maritalStatusesGet(offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultiMaritalStatusesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.maritalStatusesGet(offset, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MaritalStatusesApi.maritalStatusesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MaritalStatusesApi - factory interface
 * @export
 */
export const MaritalStatusesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MaritalStatusesApiFp(configuration)
    return {
        /**
         * 
         * @summary List Available Marital Status Options for Forms
         * @param {number} [offset] Page number of the list
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maritalStatusesGet(offset?: number, limit?: number, options?: any): AxiosPromise<MultiMaritalStatusesResponse> {
            return localVarFp.maritalStatusesGet(offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MaritalStatusesApi - object-oriented interface
 * @export
 * @class MaritalStatusesApi
 * @extends {BaseAPI}
 */
export class MaritalStatusesApi extends BaseAPI {
    /**
     * 
     * @summary List Available Marital Status Options for Forms
     * @param {number} [offset] Page number of the list
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaritalStatusesApi
     */
    public maritalStatusesGet(offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return MaritalStatusesApiFp(this.configuration).maritalStatusesGet(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update User profiles
         * @param {PutProfileRequest} putProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesPut: async (putProfileRequest: PutProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'putProfileRequest' is not null or undefined
            assertParamExists('profilesPut', 'putProfileRequest', putProfileRequest)
            const localVarPath = `/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update User profiles
         * @param {PutProfileRequest} putProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesPut(putProfileRequest: PutProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesPut(putProfileRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.profilesPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfilesApiFp(configuration)
    return {
        /**
         * 
         * @summary Update User profiles
         * @param {PutProfileRequest} putProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesPut(putProfileRequest: PutProfileRequest, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.profilesPut(putProfileRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     * 
     * @summary Update User profiles
     * @param {PutProfileRequest} putProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesPut(putProfileRequest: PutProfileRequest, options?: AxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).profilesPut(putProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserManagementApi - axios parameter creator
 * @export
 */
export const UserManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of users
         * @param {number} [offset] Page number of the users list
         * @param {number} [limit] Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new user
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (userRequest: UserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('usersPost', 'userRequest', userRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdDelete', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user by ID
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdGet', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user
         * @param {number} userId 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPut: async (userId: number, userRequest: UserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdPut', 'userId', userId)
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('usersUserIdPut', 'userRequest', userRequest)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserManagementApi - functional programming interface
 * @export
 */
export const UserManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of users
         * @param {number} [offset] Page number of the users list
         * @param {number} [limit] Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultiUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(offset, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserManagementApi.usersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new user
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(userRequest: UserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(userRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserManagementApi.usersPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a user
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdDelete(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdDelete(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserManagementApi.usersUserIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get a user by ID
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdGet(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserManagementApi.usersUserIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update a user
         * @param {number} userId 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdPut(userId: number, userRequest: UserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdPut(userId, userRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserManagementApi.usersUserIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserManagementApi - factory interface
 * @export
 */
export const UserManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of users
         * @param {number} [offset] Page number of the users list
         * @param {number} [limit] Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(offset?: number, limit?: number, options?: any): AxiosPromise<MultiUsersResponse> {
            return localVarFp.usersGet(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new user
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(userRequest: UserRequest, options?: any): AxiosPromise<SingleUserResponse> {
            return localVarFp.usersPost(userRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete(userId: number, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.usersUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user by ID
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(userId: number, options?: any): AxiosPromise<SingleUserResponse> {
            return localVarFp.usersUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user
         * @param {number} userId 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPut(userId: number, userRequest: UserRequest, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.usersUserIdPut(userId, userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserManagementApi - object-oriented interface
 * @export
 * @class UserManagementApi
 * @extends {BaseAPI}
 */
export class UserManagementApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of users
     * @param {number} [offset] Page number of the users list
     * @param {number} [limit] Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public usersGet(offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).usersGet(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new user
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public usersPost(userRequest: UserRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).usersPost(userRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public usersUserIdDelete(userId: number, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).usersUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user by ID
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public usersUserIdGet(userId: number, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).usersUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user
     * @param {number} userId 
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public usersUserIdPut(userId: number, userRequest: UserRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).usersUserIdPut(userId, userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserStatusesApi - axios parameter creator
 * @export
 */
export const UserStatusesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all user statuses
         * @param {number} [offset] Page number of the list
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersStatusesGet: async (offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserStatusesApi - functional programming interface
 * @export
 */
export const UserStatusesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserStatusesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all user statuses
         * @param {number} [offset] Page number of the list
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersStatusesGet(offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultiUserStatusesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersStatusesGet(offset, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserStatusesApi.usersStatusesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserStatusesApi - factory interface
 * @export
 */
export const UserStatusesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserStatusesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all user statuses
         * @param {number} [offset] Page number of the list
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersStatusesGet(offset?: number, limit?: number, options?: any): AxiosPromise<MultiUserStatusesResponse> {
            return localVarFp.usersStatusesGet(offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserStatusesApi - object-oriented interface
 * @export
 * @class UserStatusesApi
 * @extends {BaseAPI}
 */
export class UserStatusesApi extends BaseAPI {
    /**
     * 
     * @summary Get all user statuses
     * @param {number} [offset] Page number of the list
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusesApi
     */
    public usersStatusesGet(offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return UserStatusesApiFp(this.configuration).usersStatusesGet(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



